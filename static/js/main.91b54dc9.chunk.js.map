{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Citas","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","Cita","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91b54dc9.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport uuid from 'react-uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    // Creamos el State de Citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota:  '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    // Creamos el State para los Errores\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    // Función que se ejecuta cada vez que el usuario escribe en el input\r\n    const actualizarState = e => {\r\n        // Tomamos el parametro con los datos del evento \r\n        // y aprovechamos el atributo \"name\" de los inputs del formulario para mapear los datos (e.target.name)\r\n        // y tomamos el valor del input y lo agregamos al array (e.target.value)\r\n\r\n        // Utilizamos la sintaxis de \"...\" llamado \"Spread Operator\" para clonar el array \"cita\"\r\n        // Le pasamos como 1er parametro un array con la copia del array \"cita\"\r\n        // para que persistan los datos que le vayamos pasando en el 2do parametro\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    // Extraemos los valores del array \"cita\" creado con el \"useState\"\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n        // Validamos que ningun campo este vacio\r\n        //.trim(): Eliminas los espacios en blancos del comienzo y del final de un string\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n            // Actualizamos el State de Errores a \"true\" en el caso que se envie un campo vacio\r\n            actualizarError(true);\r\n            return\r\n        }\r\n\r\n        // En el caso que pase la validación reseteamos el state de errores a \"false\" para que no se siga mostrando el mensaje de error\r\n        actualizarError(false);\r\n\r\n        // Generamos un ID con la libreria \"uuid\"\r\n        cita.id = uuid();\r\n\r\n        // Creamos la cita\r\n        // Utilizamos la función que se envió por parametro (o props) desde el componente padre para crear las Citas\r\n        // Este ejecutará la función \"guardarCitas\" para actualizar el State de Citas\r\n        crearCita(cita);\r\n\r\n        // Reseteamos el Formulario\r\n        actualizarCita({\r\n            mascota:  '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        });\r\n\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear Citas</h2>\r\n            {/* Dentro del \"return\" solo se pueden agregar las condicionales con \"Operadores Ternarios\"*/}\r\n            {/* Mostramos un mensaje de error en el caso que el State de errores se actualice a \"true\" */}\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null}\r\n\r\n            <form\r\n                // Agregamos la función \"submitCita\" al evento \"onSubmit\" del formulario\r\n                // Cuando se envie el formulario, se ejecutará la función \"submitCita\"\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota} // Agregamos  el valor del array \"cita\" creado con el \"useState\"\r\n                />\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre dueño de la mascota\"\r\n                    onChange={actualizarState}\r\n                    value={propietario} // Agregamos  el valor del array \"cita\" creado con el \"useState\"\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha} // Agregamos  el valor del array \"cita\" creado con el \"useState\"\r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora} // Agregamos  el valor del array \"cita\" creado con el \"useState\"\r\n                />\r\n\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas} // Agregamos  el valor del array \"cita\" creado con el \"useState\"\r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar Cita</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n// Documentamos el componente con \"PropTypes\"\r\n// IMPORTANTE: No se documentan las Key/Id (o valor unico) que le pasamos al componente.\r\n//             Solo se documentan los parametros que recibe la función principal del componente\r\nFormulario.propTypes = {\r\n    // Key: Pasamos el nombre del PROP que pasamos al componente\r\n    // Value: Pasamos el tipo de PROP que estamos pasando al componente\r\n    //        Funcion de puntos: \r\n    //        1) Siempre se pasa el objeto \"PropTypes\"\r\n    //        2) Se pasa el tipo de PROP (number, string, object, func, array, etc)\r\n    //        3) Se pasa \"isRequired\" en el caso que sea obligatorio\r\n\r\n    // Si existen algunos problemas de inconsistencias con el tipo de PROP que estamos pasando al componente\r\n    // Este nos avisará de algun error y el motivo.\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import PropTypes from 'prop-types';\r\n\r\nconst Citas = ({cita, eliminarCita}) =>  ( \r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Propietario: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button\r\n        className=\"button eliminar u-full-width\"\r\n        onClick={()=>{eliminarCita(cita.id)}}\r\n        >\r\n        Eliminar &times;</button>\r\n    </div>\r\n);\r\n\r\n// Documentamos el componente con \"PropTypes\"\r\n// IMPORTANTE: No se documentan las Key/Id (o valor unico) que le pasamos al componente.\r\n//             Solo se documentan los parametros que recibe la función principal del componente\r\nCitas.propTypes = {\r\n    // Key: Pasamos el nombre del PROP que pasamos al componente\r\n    // Value: Pasamos el tipo de PROP que estamos pasando al componente\r\n    //        Funcion de puntos: \r\n    //        1) Siempre se pasa el objeto \"PropTypes\"\r\n    //        2) Se pasa el tipo de PROP (number, string, object, func, array, etc)\r\n    //        3) Se pasa \"isRequired\" en el caso que sea obligatorio\r\n\r\n    // Si existen algunos problemas de inconsistencias con el tipo de PROP que estamos pasando al componente\r\n    // Este nos avisará de algun error y el motivo.\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Citas;","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  // Tomamos el valor del Item \"cita\" proveniente del LocalStorage\n  // JSON.parse(): Parseamos a JSON los datos obtenidos del LocalStorage, ya que este solo soporta datos de tipo String\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  // Si no tenemos datos cargados en el LocalStorage declaramos la variable como un array\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  // Creamos el useState para almacenar las Citas\n  const [citas, guardarCitas] = useState(citasIniciales); // Le pasamos como parametro al useState la variable con los datos del LocalStorage\n\n  // useEffect(): se utiliza para detectar cambios en el State del componente una vez que este se termine de cargar\n  //              y siempre se le tiene que pasar un arrow function como 1er parametro con el codigo que queremos que se ejecute.              \n  //              y como 2do parametro se agregan las dependencias, es decir los State's que queremos que mire la función useEffect().\n  useEffect( () => {\n    // Tomamos el valor del Item \"cita\" proveniente del LocalStorage\n    // JSON.parse(): Parseamos a JSON los datos obtenidos del LocalStorage, ya que este solo soporta datos de tipo String\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if(citasIniciales){\n      // Si se actualiza el State de \"citas\" y este contiene datos, entonces lo cargamos en el LocalStorage\n      // JSON.stringify(): Tranforma el Array a String, que es lo unico que soporta LocalStorage\n      localStorage.setItem('citas', JSON.stringify(citas));\n    }else{\n      // En el caso que se cargue por primera vez y no se tenga datos en el State de \"citas\", cargamos un array vacio en el LocalStorage\n      // JSON.stringify(): Tranforma el Array a String, que es lo unico que soporta LocalStorage\n      localStorage.setItem('citas',  JSON.stringify([]));\n    }\n\n\n  }, [citas]) ; // Para que la función \"useEffec()\" solo se ejecute una sola vez y no genere un bucle\n                // Se le tiene eque pasar como 2do parametro un Array [] vacio\n\n  // Creamos la función que utilizará el useState para ir guardando las Citas\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,  // Hacemos una copia del array y le pasamos un nuevo objeto para que no se pierdan los datos del State\n      cita\n    ])\n  }\n\n  // Creamos la función que utiliará el useState de Citas para ir eliminandolas\n  const eliminarCita = id => {\n\n    // Filtramos el array \"citas\" por los IDs distintos al que le pasamos,\n    // de este modo nos creará un array sin la cita que corresponda a este ID,\n    // y lo estaríamos eliminando.\n    // (Si hicieramos que nos filtrara las citas igual al que le pasamos, solo nos devolvería la cita con este ID)\n\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n\n    // Como \"nuevaCitas\" ya es un array, solo le pasamos como parametro a la función \"guardarCitas\"\n    // De este modo actualizará el State de citas, sin la cita que hacía referencia al ID que le pasamos\n    guardarCitas(nuevasCitas);\n  }\n\n   // Titulo condicional dependiendo de la existencia de las Citas\n   const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus Citas';\n\n  return (\n      <Fragment>\n            <h1>Administrador de Pacientes</h1>\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Formulario \n                    crearCita={crearCita} // Enviamos por props la función de crear las citas\n                  />\n                </div>\n                <div className=\"one-half column\">\n                  <h2>{titulo}</h2>\n                  {citas.map(cita => (\n                    <Cita\n                      key={cita.key}\n                      cita={cita}\n                      eliminarCita={eliminarCita}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n      </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}